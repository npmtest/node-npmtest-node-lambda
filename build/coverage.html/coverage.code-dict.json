{"/home/travis/build/npmtest/node-npmtest-node-lambda/test.js":"/* istanbul instrument in package npmtest_node_lambda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-lambda/lib.npmtest_node_lambda.js":"/* istanbul instrument in package npmtest_node_lambda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_lambda = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_lambda = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-lambda/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-lambda && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_lambda */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_lambda\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_lambda.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_lambda.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_lambda.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_lambda.__dirname +\n                    '/lib.npmtest_node_lambda.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-lambda/node_modules/node-lambda/lib/main.js":"'use strict';\n\nvar aws = require('aws-sdk');\nvar exec = require('child_process').exec;\nvar fs = require('fs-extra');\nvar os = require('os');\nvar packageJson = require('./../package.json');\nvar path = require('path');\nvar async = require('async');\nvar zip = new require('node-zip')();\nvar dotenv = require('dotenv');\nvar ScheduleEvents = require('./schedule_events');\n\nvar maxBufferSize = 50 * 1024 * 1024;\n\nvar Lambda = function () {\n  this.version = packageJson.version;\n\n  return this;\n};\n\nLambda.prototype._createSampleFile = function (file, boilerplateName) {\n  var exampleFile = process.cwd() + '/' + file;\n  var boilerplateFile = __dirname + '/' + (boilerplateName || file) + '.example';\n\n  if (!fs.existsSync(exampleFile)) {\n    fs.writeFileSync(exampleFile, fs.readFileSync(boilerplateFile));\n    console.log(exampleFile + ' file successfully created');\n  }\n};\n\nLambda.prototype.setup = function (program) {\n  console.log('Running setup.');\n  this._createSampleFile('.env', '.env');\n  this._createSampleFile(program.eventFile, 'event.json');\n  this._createSampleFile('deploy.env', 'deploy.env');\n  this._createSampleFile(program.contextFile, 'context.json');\n  this._createSampleFile('event_sources.json', 'event_sources.json');\n  console.log('Setup done. Edit the .env, deploy.env, ' + program.contextFile + ' and ' + program.eventFile +\n    ' files as needed.');\n};\n\nLambda.prototype.run = function (program) {\n  this._createSampleFile(program.eventFile, 'event.json');\n  var splitHandler = program.handler.split('.');\n  var filename = splitHandler[0] + '.js';\n  var handlername = splitHandler[1];\n\n  // Set custom environment variables if program.configFile is defined\n  if (program.configFile) {\n    this._setRunTimeEnvironmentVars(program);\n  }\n\n  var handler = require(process.cwd() + '/' + filename)[handlername];\n  var event = require(process.cwd() + '/' + program.eventFile);\n  var context = require(process.cwd() + '/' + program.contextFile);\n\n  this._runHandler(handler, event, program, context);\n};\n\nLambda.prototype._runHandler = function (handler, event, program, context) {\n\n  var startTime = new Date();\n  var timeout = Math.min(program.timeout, 300) * 1000; // convert the timeout into milliseconds\n\n  var callback = function (err, result) {\n    if (err) {\n      console.log('Error: ' + err);\n      process.exit(-1);\n    } else {\n      console.log('Success:');\n      if (result) {\n        console.log(JSON.stringify(result));\n      }\n      process.exit(0);\n    }\n  };\n\n  context.getRemainingTimeInMillis = function () {\n    var currentTime = new Date();\n    return timeout - (currentTime - startTime);\n  };\n\n  switch(program.runtime) {\n    case \"nodejs4.3\":\n      handler(event, context, callback);\n    break;\n    case \"nodejs6.10\":\n      handler(event, context, callback);\n    break;\n    default:\n      console.error(\"Runtime [\" + runtime + \"] is not supported.\");\n  }\n\n};\n\nLambda.prototype._params = function (program, buffer) {\n  var params = {\n    FunctionName: program.functionName + (program.environment ? '-' + program.environment : ''),\n    Code: {\n      ZipFile: buffer\n    },\n    Handler: program.handler,\n    Role: program.role,\n    Runtime: program.runtime,\n    Description: program.description,\n    MemorySize: program.memorySize,\n    Timeout: program.timeout,\n    Publish: program.publish,\n    VpcConfig: {\n      SubnetIds: [],\n      SecurityGroupIds: []\n    },\n    Environment: {\n      Variables: null\n    },\n    DeadLetterConfig: {\n      TargetArn: null\n    }\n  };\n  if (program.lambdaVersion) {\n    params.FunctionName += ('-' + program.lambdaVersion);\n  }\n  if (program.vpcSubnets && program.vpcSecurityGroups) {\n    params.VpcConfig = {\n      'SubnetIds': program.vpcSubnets.split(','),\n      'SecurityGroupIds': program.vpcSecurityGroups.split(',')\n    };\n  }\n  if (program.configFile) {\n    var configValues = fs.readFileSync(program.configFile);\n    var config = dotenv.parse(configValues);\n    // If `configFile` is an empty file, `config` value will be `{}`\n    params.Environment = {\n      Variables: config\n    }\n  }\n  if (program.deadLetterConfigTargetArn !== undefined) {\n    params.DeadLetterConfig = {\n      TargetArn: program.deadLetterConfigTargetArn\n    };\n  }\n\n  return params;\n};\n\nLambda.prototype._eventSourceList = function (program) {\n  if (!program.eventSourceFile) {\n    return {\n      EventSourceMappings: [],\n      ScheduleEvents: []\n    };\n  }\n  const list = (function() {\n    try {\n      return fs.readJsonSync(program.eventSourceFile);\n    } catch(err) {\n      throw err;\n    }\n  })();\n\n  if (Object.prototype.toString.call(list) === '[object Array]') {\n    // backward-compatible\n    return { EventSourceMappings: list };\n  }\n  if (!list.EventSourceMappings) {\n    list.EventSourceMappings = [];\n  }\n  if (!list.ScheduleEvents) {\n    list.ScheduleEvents = [];\n  }\n  return list;\n};\n\n/**\n * @deprecated\n */\nLambda.prototype._zipfileTmpPath = function (program) {\n  var ms_since_epoch = +new Date();\n  var filename = program.functionName + '-' + ms_since_epoch + '.zip';\n  var zipfile = path.join(os.tmpDir(), filename);\n\n  return zipfile;\n};\n\nLambda.prototype._rsync = function (program, src, dest, excludeNodeModules, callback) {\n  var excludes = ['.git*', '*.swp', '.editorconfig', 'deploy.env', '*.log', '/build/'],\n      excludeGlobs = [];\n  if (program.excludeGlobs) {\n    excludeGlobs = program.excludeGlobs.split(' ');\n  }\n  var excludeArgs = excludeGlobs\n    .concat(excludes)\n    .concat(excludeNodeModules ? ['/node_modules'] : [])\n    .map(function (exclude) {\n      return '--exclude=' + exclude;\n    }).join(' ');\n\n  exec('mkdir -p ' + dest, function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // include package.json unless prebuiltDirectory is set\n    var includeArgs = program.prebuiltDirectory ? '' : '--include package.json ';\n\n    // we need the extra / after src to make sure we are copying the content\n    // of the directory, not the directory itself.\n    exec('rsync -rL ' + includeArgs + excludeArgs + ' ' + src.trim() + '/ ' + dest, {\n      maxBuffer: maxBufferSize,\n      env: process.env\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n\n      return callback(null, true);\n    });\n  });\n};\n\nLambda.prototype._npmInstall = function (program, codeDirectory, callback) {\n  exec('npm -s install --production --prefix ' + codeDirectory, {\n    maxBuffer: maxBufferSize,\n    env: process.env\n  }, function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, true);\n  });\n};\n\nLambda.prototype._postInstallScript = function (program, codeDirectory, callback) {\n  var script_filename = 'post_install.sh';\n  var cmd = './' + script_filename + ' ' + program.environment;\n\n  var filePath = [codeDirectory, script_filename].join('/');\n\n  fs.exists(filePath, function (exists) {\n    if (exists) {\n      console.log('=> Running post install script ' + script_filename);\n      exec(cmd, { env: process.env, cwd: codeDirectory, maxBuffer: maxBufferSize },\n        function (error, stdout, stderr) {\n\n        if (error) {\n          callback(error + \" stdout: \" + stdout + \" stderr: \" + stderr);\n        } else {\n          console.log(\"\\t\\t\" + stdout);\n          callback(null);\n        }\n      });\n    } else {\n      callback(null);\n    }\n  });\n\n};\n\nLambda.prototype._zip = function (program, codeDirectory, callback) {\n\n  var options = {\n    type: 'nodebuffer',\n    compression: 'DEFLATE'\n  };\n\n  console.log('=> Zipping repo. This might take up to 30 seconds');\n  fs.walk(codeDirectory)\n    .on('data', function (file) {\n      if (!file.stats.isDirectory()) {\n        var content = fs.readFileSync(file.path);\n        var filePath = file.path.replace(codeDirectory + '/', '');\n        zip.file(filePath, content);\n      }\n    })\n    .on('end', function () {\n      var data = zip.generate(options);\n      return callback(null, data);\n    });\n};\n\nLambda.prototype._nativeZip = function (program, codeDirectory, callback) {\n  var zipfile = this._zipfileTmpPath(program),\n    cmd = 'zip -r ' + zipfile + ' .';\n\n  exec(cmd, {\n    env: process.env,\n    cwd: codeDirectory,\n    maxBuffer: maxBufferSize\n  }, function (err) {\n    if (err !== null) {\n      return callback(err, null);\n    }\n\n    var data = fs.readFileSync(zipfile);\n    callback(null, data);\n  });\n};\n\nLambda.prototype._codeDirectory = function (program) {\n  var epoch_time = +new Date();\n\n  return path.join(os.tmpDir(), program.functionName + '-' + epoch_time);\n};\n\nLambda.prototype._cleanDirectory = function (codeDirectory, callback) {\n  exec('rm -rf ' + codeDirectory, function (err) {\n    if (err) {\n      throw err;\n    }\n\n    fs.mkdirs(codeDirectory, function (err) {\n      if (err) {\n        throw err;\n      }\n\n      return callback(null, true);\n    });\n  });\n};\n\nLambda.prototype._setRunTimeEnvironmentVars = function (program) {\n  var configValues = fs.readFileSync(program.configFile);\n  var config = dotenv.parse(configValues);\n\n  for (var k in config) {\n    if (!config.hasOwnProperty(k)) {\n      continue;\n    }\n\n    process.env[k] = config[k];\n  }\n};\n\nLambda.prototype._uploadExisting = function (lambda, params, cb) {\n  return lambda.updateFunctionCode({\n    'FunctionName': params.FunctionName,\n    'ZipFile': params.Code.ZipFile,\n    'Publish': params.Publish\n  }, function (err, data) {\n    if(err) {\n      return cb(err, data);\n    }\n\n    return lambda.updateFunctionConfiguration({\n      'FunctionName': params.FunctionName,\n      'Description': params.Description,\n      'Handler': params.Handler,\n      'MemorySize': params.MemorySize,\n      'Role': params.Role,\n      'Timeout': params.Timeout,\n      'Runtime': params.Runtime,\n      'VpcConfig': params.VpcConfig,\n      'Environment': params.Environment,\n      'DeadLetterConfig': params.DeadLetterConfig\n    }, function (err, data) {\n      return cb(err, data);\n    });\n  });\n};\n\nLambda.prototype._uploadNew = function (lambda, params, cb) {\n  return lambda.createFunction(params, function (err, data) {\n    return cb(err, data);\n  });\n};\n\nLambda.prototype._readArchive = function (program, archive_callback) {\n  if (!fs.existsSync(program.deployZipfile)) {\n    var err = new Error('No such Zipfile [' + program.deployZipfile + ']');\n    return archive_callback(err);\n  }\n  fs.readFile(program.deployZipfile, archive_callback);\n},\n\nLambda.prototype._archive = function (program, archive_callback) {\n  if (program.deployZipfile && fs.existsSync(program.deployZipfile)) {\n    return this._readArchive(program, archive_callback);\n  }\n  return program.prebuiltDirectory ?\n    this._archivePrebuilt(program, archive_callback) :\n    this._buildAndArchive(program, archive_callback);\n};\n\nLambda.prototype._archivePrebuilt = function (program, archive_callback) {\n  var codeDirectory = this._codeDirectory(program);\n  var _this = this;\n  this._rsync(program, program.prebuiltDirectory, codeDirectory, false, function (err) {\n    if (err) {\n      return archive_callback(err);\n    }\n\n    console.log('=> Zipping deployment package');\n    var archive = process.platform !== 'win32' ? _this._nativeZip : _this._zip;\n    archive = archive.bind(_this);\n\n    archive(program, codeDirectory, archive_callback);\n  });\n};\n\nLambda.prototype._buildAndArchive = function (program, archive_callback) {\n  this._createSampleFile('.env', '.env');\n\n  // Warn if not building on 64-bit linux\n  var arch = process.platform + '.' + process.arch;\n  if (arch !== 'linux.x64') {\n    console.warn('Warning!!! You are building on a platform that is not 64-bit Linux (%s). ' +\n      'If any of your Node dependencies include C-extensions, they may not work as expected in the ' +\n      'Lambda environment.\\n\\n', arch);\n  }\n\n  var _this = this;\n  var codeDirectory = _this._codeDirectory(program);\n\n  _this._cleanDirectory(codeDirectory, function (err) {\n    if (err) {\n      return archive_callback(err);\n    }\n    console.log('=> Moving files to temporary directory');\n    // Move files to tmp folder\n    _this._rsync(program, '.', codeDirectory, true, function (err) {\n      if (err) {\n        return archive_callback(err);\n      }\n      console.log('=> Running npm install --production');\n      _this._npmInstall(program, codeDirectory, function (err) {\n        if (err) {\n          return archive_callback(err);\n        }\n\n        _this._postInstallScript(program, codeDirectory, function (err) {\n          if (err) {\n            return archive_callback(err);\n          }\n\n          console.log('=> Zipping deployment package');\n\n          var archive = process.platform !== 'win32' ? _this._nativeZip : _this._zip;\n          archive = archive.bind(_this);\n\n          archive(program, codeDirectory, archive_callback);\n        });\n      });\n    });\n  });\n};\n\nLambda.prototype._listEventSourceMappings = function (lambda, params, cb) {\n  return lambda.listEventSourceMappings(params, function (err, data) {\n    var eventSourceMappings = [];\n    if (!err && data && data.EventSourceMappings) {\n      eventSourceMappings = data.EventSourceMappings;\n    }\n    return cb(err, eventSourceMappings);\n  });\n};\n\nLambda.prototype._updateEventSources = function (lambda, functionName, existingEventSourceList, eventSourceList, cb) {\n  var updateEventSourceList = [];\n  // Checking new and update event sources\n  for (var i in eventSourceList) {\n    var isExisting = false;\n    for (var j in existingEventSourceList) {\n      if (eventSourceList[i]['EventSourceArn'] === existingEventSourceList[j]['EventSourceArn']) {\n        isExisting = true;\n        updateEventSourceList.push({\n          'type': 'update',\n          'FunctionName': functionName,\n          'Enabled': eventSourceList[i]['Enabled'],\n          'BatchSize': eventSourceList[i]['BatchSize'],\n          'UUID': existingEventSourceList[j]['UUID']\n        });\n        break;\n      }\n    }\n\n    // If it is new source\n    if (!isExisting) {\n      updateEventSourceList.push({\n        'type': 'create',\n        'FunctionName': functionName,\n        'EventSourceArn': eventSourceList[i]['EventSourceArn'],\n        'Enabled': eventSourceList[i]['Enabled'] ? eventSourceList[i]['Enabled'] : false,\n        'BatchSize': eventSourceList[i]['BatchSize'] ? eventSourceList[i]['BatchSize'] : 100,\n        'StartingPosition': eventSourceList[i]['StartingPosition'] ? eventSourceList[i]['StartingPosition'] : 'LATEST',\n      });\n    }\n  }\n\n  // Checking delete event sources\n  for (var i in existingEventSourceList) {\n    var isExisting = false;\n    for (var j in eventSourceList) {\n      if (eventSourceList[j]['EventSourceArn'] === existingEventSourceList[i]['EventSourceArn']) {\n        isExisting = true;\n        break;\n      }\n    }\n\n    // If delete the source\n    if (!isExisting) {\n      updateEventSourceList.push({\n        'type': 'delete',\n        'UUID': existingEventSourceList[i]['UUID']\n      });\n    }\n  }\n\n  return async.map(updateEventSourceList, function (updateEventSource, _cb) {\n    switch(updateEventSource['type']) {\n      case 'create':\n        delete updateEventSource['type'];\n        lambda.createEventSourceMapping(updateEventSource, function (err, data) {\n          return _cb(err, data);\n        });\n        break;\n      case 'update':\n        delete updateEventSource['type'];\n        lambda.updateEventSourceMapping(updateEventSource, function (err, data) {\n          return _cb(err, data);\n        });\n        break;\n      case 'delete':\n        delete updateEventSource['type'];\n        lambda.deleteEventSourceMapping(updateEventSource, function (err, data) {\n          return _cb(err, data);\n        });\n        break;\n    }\n  }, function(err, results) {\n    return cb(err, results);\n  });\n};\n\nLambda.prototype._updateScheduleEvents = function (scheduleEvents, functionArn, scheduleList, cb) {\n  return async.series(scheduleList.map(function(schedule) {\n    return function(_cb) {\n      const params = Object.assign(schedule, { FunctionArn: functionArn });\n      scheduleEvents.add(params).then(function (data) {\n        _cb(null, params);\n      }).catch(function (err) {\n        _cb(err);\n      });\n    };\n  }), function(err, results) {\n    cb(err, results);\n  });\n};\n\nLambda.prototype.package = function (program) {\n  var _this = this;\n  if (!program.packageDirectory) {\n    throw 'packageDirectory not specified!';\n  }\n  try {\n    var isDir = fs.lstatSync(program.packageDirectory).isDirectory();\n\n    if (!isDir) {\n      throw program.packageDirectory + ' is not a directory!';\n    }\n  } catch(err) {\n    if (err.code === 'ENOENT') {\n      console.log('=> Creating package directory');\n      fs.mkdirsSync(program.packageDirectory);\n    } else {\n      throw err;\n    }\n  }\n\n  _this._archive(program, function (err, buffer) {\n    if (err) {\n      throw err;\n    }\n\n    var basename = program.functionName + (program.environment ? '-' + program.environment : '');\n    var zipfile = path.join(program.packageDirectory, basename + '.zip');\n    console.log('=> Writing packaged zip');\n    fs.writeFile(zipfile, buffer, function (err) {\n      if (err) {\n        throw err;\n      }\n      console.log('Packaged zip created: ' + zipfile);\n    });\n  });\n};\n\nLambda.prototype.deploy = function (program) {\n  var _this = this;\n  var regions = program.region.split(',');\n  _this._archive(program, function (err, buffer) {\n    if (err) {\n      throw err;\n    }\n\n    console.log('=> Reading zip file to memory');\n    var params = _this._params(program, buffer);\n\n    console.log('=> Reading event source file to memory');\n    var eventSourceList = _this._eventSourceList(program);\n\n    async.map(regions, function (region, cb) {\n      console.log('=> Uploading zip file to AWS Lambda ' + region + ' with parameters:');\n      console.log(params);\n\n      var aws_security = {\n        region: region\n      };\n\n      if (program.profile) {\n        aws.config.credentials = new aws.SharedIniFileCredentials({\n          profile: program.profile\n        });\n      } else {\n        aws_security.accessKeyId = program.accessKey;\n        aws_security.secretAccessKey = program.secretKey;\n      }\n\n      if (program.sessionToken) {\n        aws_security.sessionToken = program.sessionToken;\n      }\n\n      aws.config.update(aws_security);\n\n      var lambda = new aws.Lambda({\n        apiVersion: '2015-03-31'\n      });\n      var scheduleEvents = new ScheduleEvents(aws);\n\n      // Checking function\n      return lambda.getFunction({\n        'FunctionName': params.FunctionName\n      }, function (err) {\n        if (err) {\n          // Function does not exist\n          return _this._uploadNew(lambda, params, function(err, results) {\n            if (err) {\n              throw err;\n            }\n            console.log('=> Zip file(s) done uploading. Results follow: ');\n            console.log(results);\n\n            async.parallel([\n              function(_callback) {\n                // Updating event source(s)\n                _this._updateEventSources(lambda, params.FunctionName, [], eventSourceList.EventSourceMappings, function(err, results) {\n                  _callback(null, results);\n                });\n              },\n              function(_callback) {\n                _this._updateScheduleEvents(scheduleEvents, results.FunctionArn, eventSourceList.ScheduleEvents, function(err, results) {\n                  _callback(err, results);\n                });\n              }\n            ], function(err, results) {\n              cb(err, results);\n            });\n          });\n        }\n\n        // Function exists\n        _this._listEventSourceMappings(lambda, {\n          'FunctionName': params.FunctionName\n        }, function(err, existingEventSourceList) {\n          if (err) {\n            throw err;\n          }\n          return async.parallel([\n            function(_callback) {\n              _this._uploadExisting(lambda, params, function(err, results) {\n                if (err) {\n                  throw err;\n                }\n                console.log('=> Zip file(s) done uploading. Results follow: ');\n                console.log(results);\n                _this._updateScheduleEvents(scheduleEvents, results.FunctionArn, eventSourceList.ScheduleEvents, function(err, results) {\n                  _callback(err, results);\n                });\n              });\n            },\n            function(_callback) {\n              _this._updateEventSources(lambda, params.FunctionName, existingEventSourceList, eventSourceList.EventSourceMappings, function(err, results) {\n                _callback(err, results);\n              });\n            }\n          ], function(err, results) {\n            cb(err, results);\n          });\n        });\n      });\n    }, function (err, results) {\n      if (err) {\n        throw err;\n      }\n      console.log('=> All tasks done. Results follow: ');\n      console.log(JSON.stringify(results, null, ' '));\n    });\n  });\n};\n\n\nmodule.exports = new Lambda();\n","/home/travis/build/npmtest/node-npmtest-node-lambda/node_modules/node-lambda/lib/schedule_events.js":"'use strict';\n\nconst ScheduleEvents = function(aws) {\n  // Authenticated `aws` object in `lib/main.js`\n  this.lambda = new aws.Lambda({\n    apiVersion: '2015-03-31'\n  });\n  this.cloudwatchevents = new aws.CloudWatchEvents({\n    apiVersion: '2015-10-07'\n  });\n};\n\nScheduleEvents.prototype = {\n  _ruleDescription: (params) => {\n    return `${params.ScheduleName} - ${params.ScheduleExpression}`;\n  },\n\n  _functionName: (params) => {\n    return params.FunctionArn.split(':').pop();\n  },\n\n  _putRulePrams: function(params) {\n    return {\n      Name: params.ScheduleName,\n      Description: this._ruleDescription(params),\n      State: params.ScheduleState,\n      ScheduleExpression: params.ScheduleExpression\n    };\n  },\n\n  _putRule: function(params) {\n    const _this = this;\n    // return RuleArn if created\n    return new Promise((resolve) => {\n      const _params = _this._putRulePrams(params);\n      _this.cloudwatchevents.putRule(_params, (err, rule) => {\n        if (err) throw err;\n        resolve(rule);\n      });\n    });\n  },\n\n  _addPermissionParams: function(params) {\n    return {\n      Action: 'lambda:InvokeFunction',\n      FunctionName: this._functionName(params),\n      Principal: 'events.amazonaws.com',\n      SourceArn: params.RuleArn,\n      StatementId: params.ScheduleName\n    };\n  },\n\n  _addPermission: function(params) {\n    const _this = this;\n    return new Promise((resolve) => {\n      const _params = _this._addPermissionParams(params);\n      _this.lambda.addPermission(_params, (err, data) => {\n        if (err) {\n          if (err.code != 'ResourceConflictException') throw err;\n          // If it exists it will result in an error but there is no problem.\n          resolve('Already exists permission');\n        }\n        resolve(data);\n      });\n    });\n  },\n\n  _putTargetsParams: function(params) {\n    return {\n      Rule: params.ScheduleName,\n      Targets: [{\n        Arn: params.FunctionArn,\n        Id: this._functionName(params)\n      }]\n    };\n  },\n\n  _putTargets: function(params) {\n    const _this = this;\n    return new Promise((resolve) => {\n      const _params = _this._putTargetsParams(params);\n      _this.cloudwatchevents.putTargets(_params, (err, data) => {\n        // even if it is already registered, it will not be an error.\n        if (err) throw(err);\n        resolve(data);\n      });\n    });\n  },\n\n  add: function(params) {\n    const _this = this;\n    return Promise.resolve().then(() => {\n      return _this._putRule(params);\n    }).then((rule) => {\n      return _this._addPermission(Object.assign(params, rule));\n    }).then((data) => {\n      return _this._putTargets(params);\n    });\n  },\n};\n\nmodule.exports = ScheduleEvents;\n"}